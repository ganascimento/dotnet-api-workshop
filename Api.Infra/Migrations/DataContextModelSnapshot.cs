// <auto-generated />
using System;
using Api.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Api.Domain.Entities.AuthEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Auth");
                });

            modelBuilder.Entity("Api.Domain.Entities.ScheduleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Api.Domain.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkUnits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2022, 6, 5, 21, 52, 39, 657, DateTimeKind.Local).AddTicks(5133),
                            Name = "Alinhamento de rodas",
                            WorkUnits = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2022, 6, 5, 21, 52, 39, 658, DateTimeKind.Local).AddTicks(4529),
                            Name = "Lavação",
                            WorkUnits = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2022, 6, 5, 21, 52, 39, 658, DateTimeKind.Local).AddTicks(4547),
                            Name = "Troca de Óleo",
                            WorkUnits = 3
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2022, 6, 5, 21, 52, 39, 658, DateTimeKind.Local).AddTicks(4550),
                            Name = "Revisão básica",
                            WorkUnits = 5
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2022, 6, 5, 21, 52, 39, 658, DateTimeKind.Local).AddTicks(4552),
                            Name = "Revisão completa",
                            WorkUnits = 8
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.WorkshopEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("Uf")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("Workshop");
                });

            modelBuilder.Entity("Api.Domain.Entities.ScheduleEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ServiceEntity", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.WorkshopEntity", "Workshop")
                        .WithMany("Schedules")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Api.Domain.Entities.WorkshopEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.AuthEntity", "Auth")
                        .WithMany()
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auth");
                });

            modelBuilder.Entity("Api.Domain.Entities.WorkshopEntity", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
